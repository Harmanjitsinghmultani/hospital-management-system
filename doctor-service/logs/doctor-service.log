2025-05-06 00:00:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:05:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:10:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:15:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:20:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:25:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:30:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:35:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:40:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:41:48 [http-nio-8086-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-06 00:41:48 [http-nio-8086-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-06 00:41:48 [http-nio-8086-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 312 ms
2025-05-06 00:41:49 [http-nio-8086-exec-1] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 00:41:49 [http-nio-8086-exec-1] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 00:41:49 [http-nio-8086-exec-1] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 00:41:49 [http-nio-8086-exec-1] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 703 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:41:49 [http-nio-8086-exec-1] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:41:49 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 00:41:49 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 00:41:49 [http-nio-8086-exec-2] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 00:41:49 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 0 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:41:49 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:42:35 [http-nio-8086-exec-3] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorById() with arguments: 3
2025-05-06 00:42:35 [http-nio-8086-exec-3] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorById()
2025-05-06 00:42:35 [http-nio-8086-exec-3] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by ID: 3
2025-05-06 00:42:35 [http-nio-8086-exec-3] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorById() in 32 ms | Result: Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}
2025-05-06 00:42:35 [http-nio-8086-exec-3] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorById() with response: Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}
2025-05-06 00:42:59 [http-nio-8086-exec-6] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 9
2025-05-06 00:42:59 [http-nio-8086-exec-6] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 00:42:59 [http-nio-8086-exec-6] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 9
2025-05-06 00:42:59 [http-nio-8086-exec-6] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 78 ms | Result: Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}
2025-05-06 00:42:59 [http-nio-8086-exec-6] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}
2025-05-06 00:42:59 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 9
2025-05-06 00:42:59 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 00:42:59 [http-nio-8086-exec-7] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 9
2025-05-06 00:42:59 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 16 ms | Result: Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}
2025-05-06 00:42:59 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}
2025-05-06 00:43:53 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 00:43:53 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 00:43:53 [http-nio-8086-exec-9] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 00:43:53 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 14 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:43:53 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:43:53 [http-nio-8086-exec-8] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 00:43:53 [http-nio-8086-exec-8] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 00:43:53 [http-nio-8086-exec-8] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 00:43:53 [http-nio-8086-exec-8] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 16 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:43:53 [http-nio-8086-exec-8] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:44:54 [http-nio-8086-exec-5] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorById() with arguments: 3
2025-05-06 00:44:54 [http-nio-8086-exec-5] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorById()
2025-05-06 00:44:54 [http-nio-8086-exec-5] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by ID: 3
2025-05-06 00:44:54 [http-nio-8086-exec-5] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorById() in 0 ms | Result: Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}
2025-05-06 00:44:54 [http-nio-8086-exec-5] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorById() with response: Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}
2025-05-06 00:45:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:45:34 [http-nio-8086-exec-4] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 00:45:34 [http-nio-8086-exec-4] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 00:45:34 [http-nio-8086-exec-4] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 00:45:34 [http-nio-8086-exec-4] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 20 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:45:34 [http-nio-8086-exec-4] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:45:34 [http-nio-8086-exec-3] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 00:45:34 [http-nio-8086-exec-3] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 00:45:34 [http-nio-8086-exec-3] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 00:45:34 [http-nio-8086-exec-3] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 11 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:45:34 [http-nio-8086-exec-3] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:46:02 [http-nio-8086-exec-8] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 00:46:02 [http-nio-8086-exec-8] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 00:46:02 [http-nio-8086-exec-8] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 00:46:02 [http-nio-8086-exec-8] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 19 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:46:02 [http-nio-8086-exec-8] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:46:02 [http-nio-8086-exec-10] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 00:46:02 [http-nio-8086-exec-10] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 00:46:02 [http-nio-8086-exec-10] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 00:46:02 [http-nio-8086-exec-10] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 16 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:46:02 [http-nio-8086-exec-10] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:46:24 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 00:46:24 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 00:46:24 [http-nio-8086-exec-2] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 00:46:24 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 18 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:46:24 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:46:24 [http-nio-8086-exec-1] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 00:46:24 [http-nio-8086-exec-1] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 00:46:24 [http-nio-8086-exec-1] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 00:46:24 [http-nio-8086-exec-1] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 22 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:46:24 [http-nio-8086-exec-1] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}]
2025-05-06 00:50:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:55:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 01:00:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 01:05:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 01:07:54 [http-nio-8086-exec-3] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.saveDoctor() with arguments: Doctor{id=null, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}
2025-05-06 01:07:54 [http-nio-8086-exec-3] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.saveDoctor()
2025-05-06 01:07:54 [http-nio-8086-exec-3] DEBUG c.h.d.service.impl.DoctorServiceImpl - Saving doctor: Doctor{id=null, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}
2025-05-06 01:07:54 [http-nio-8086-exec-3] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.saveDoctor() in 229 ms | Result: Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}
2025-05-06 01:07:54 [http-nio-8086-exec-3] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.saveDoctor() with response: Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}
2025-05-06 01:10:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 01:11:38 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 01:11:38 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 01:11:38 [http-nio-8086-exec-7] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 01:11:38 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 77 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}, Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}]
2025-05-06 01:11:38 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}, Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}]
2025-05-06 01:11:38 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 01:11:38 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 01:11:38 [http-nio-8086-exec-9] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 01:11:38 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 22 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}, Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}]
2025-05-06 01:11:38 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}, Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}]
2025-05-06 01:12:05 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 11
2025-05-06 01:12:05 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 01:12:05 [http-nio-8086-exec-2] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 11
2025-05-06 01:12:05 [http-nio-8086-exec-2] ERROR c.h.d.service.impl.DoctorServiceImpl - Doctor not found with userId: 11
2025-05-06 01:12:05 [http-nio-8086-exec-2] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorServiceImpl.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:12:05 [http-nio-8086-exec-2] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorController.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:12:05 [http-nio-8086-exec-2] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Doctor not found with userId: 11] with root cause
java.lang.RuntimeException: Doctor not found with userId: 11
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.getDoctorByUserId(DoctorServiceImpl.java:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hospital.doctor_service.aop.LoggingAspect.logAroundService(LoggingAspect.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at com.hospital.doctor_service.controller.DoctorController.getDoctorByUserId(DoctorController.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.controller.DoctorController$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-06 01:12:06 [http-nio-8086-exec-1] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 11
2025-05-06 01:12:06 [http-nio-8086-exec-1] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 01:12:06 [http-nio-8086-exec-1] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 11
2025-05-06 01:12:06 [http-nio-8086-exec-1] ERROR c.h.d.service.impl.DoctorServiceImpl - Doctor not found with userId: 11
2025-05-06 01:12:06 [http-nio-8086-exec-1] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorServiceImpl.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:12:06 [http-nio-8086-exec-1] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorController.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:12:06 [http-nio-8086-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Doctor not found with userId: 11] with root cause
java.lang.RuntimeException: Doctor not found with userId: 11
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.getDoctorByUserId(DoctorServiceImpl.java:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hospital.doctor_service.aop.LoggingAspect.logAroundService(LoggingAspect.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at com.hospital.doctor_service.controller.DoctorController.getDoctorByUserId(DoctorController.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.controller.DoctorController$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-06 01:12:33 [http-nio-8086-exec-4] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 01:12:33 [http-nio-8086-exec-4] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 01:12:33 [http-nio-8086-exec-4] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 01:12:33 [http-nio-8086-exec-4] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 13 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}, Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}]
2025-05-06 01:12:33 [http-nio-8086-exec-4] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}, Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}]
2025-05-06 01:12:33 [http-nio-8086-exec-5] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 01:12:33 [http-nio-8086-exec-5] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 01:12:33 [http-nio-8086-exec-5] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 01:12:33 [http-nio-8086-exec-5] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 16 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}, Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}]
2025-05-06 01:12:33 [http-nio-8086-exec-5] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}, Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}]
2025-05-06 01:15:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 01:16:49 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorById() with arguments: 4
2025-05-06 01:16:49 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorById()
2025-05-06 01:16:49 [http-nio-8086-exec-7] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by ID: 4
2025-05-06 01:16:49 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorById() in 10 ms | Result: Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}
2025-05-06 01:16:49 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorById() with response: Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}
2025-05-06 01:17:36 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 11
2025-05-06 01:17:36 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 01:17:36 [http-nio-8086-exec-9] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 11
2025-05-06 01:17:36 [http-nio-8086-exec-9] ERROR c.h.d.service.impl.DoctorServiceImpl - Doctor not found with userId: 11
2025-05-06 01:17:36 [http-nio-8086-exec-9] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorServiceImpl.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:17:36 [http-nio-8086-exec-9] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorController.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:17:36 [http-nio-8086-exec-9] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Doctor not found with userId: 11] with root cause
java.lang.RuntimeException: Doctor not found with userId: 11
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.getDoctorByUserId(DoctorServiceImpl.java:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hospital.doctor_service.aop.LoggingAspect.logAroundService(LoggingAspect.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at com.hospital.doctor_service.controller.DoctorController.getDoctorByUserId(DoctorController.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.controller.DoctorController$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-06 01:17:37 [http-nio-8086-exec-8] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 11
2025-05-06 01:17:37 [http-nio-8086-exec-8] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 01:17:37 [http-nio-8086-exec-8] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 11
2025-05-06 01:17:37 [http-nio-8086-exec-8] ERROR c.h.d.service.impl.DoctorServiceImpl - Doctor not found with userId: 11
2025-05-06 01:17:37 [http-nio-8086-exec-8] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorServiceImpl.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:17:37 [http-nio-8086-exec-8] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorController.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:17:37 [http-nio-8086-exec-8] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Doctor not found with userId: 11] with root cause
java.lang.RuntimeException: Doctor not found with userId: 11
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.getDoctorByUserId(DoctorServiceImpl.java:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hospital.doctor_service.aop.LoggingAspect.logAroundService(LoggingAspect.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at com.hospital.doctor_service.controller.DoctorController.getDoctorByUserId(DoctorController.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.controller.DoctorController$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-06 01:18:03 [http-nio-8086-exec-10] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 11
2025-05-06 01:18:03 [http-nio-8086-exec-10] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 01:18:03 [http-nio-8086-exec-10] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 11
2025-05-06 01:18:03 [http-nio-8086-exec-10] ERROR c.h.d.service.impl.DoctorServiceImpl - Doctor not found with userId: 11
2025-05-06 01:18:03 [http-nio-8086-exec-10] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorServiceImpl.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:18:03 [http-nio-8086-exec-10] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorController.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:18:03 [http-nio-8086-exec-10] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Doctor not found with userId: 11] with root cause
java.lang.RuntimeException: Doctor not found with userId: 11
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.getDoctorByUserId(DoctorServiceImpl.java:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hospital.doctor_service.aop.LoggingAspect.logAroundService(LoggingAspect.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at com.hospital.doctor_service.controller.DoctorController.getDoctorByUserId(DoctorController.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.controller.DoctorController$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-06 01:18:03 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 11
2025-05-06 01:18:03 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 01:18:03 [http-nio-8086-exec-2] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 11
2025-05-06 01:18:03 [http-nio-8086-exec-2] ERROR c.h.d.service.impl.DoctorServiceImpl - Doctor not found with userId: 11
2025-05-06 01:18:03 [http-nio-8086-exec-2] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorServiceImpl.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:18:03 [http-nio-8086-exec-2] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorController.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:18:03 [http-nio-8086-exec-2] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Doctor not found with userId: 11] with root cause
java.lang.RuntimeException: Doctor not found with userId: 11
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.getDoctorByUserId(DoctorServiceImpl.java:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hospital.doctor_service.aop.LoggingAspect.logAroundService(LoggingAspect.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at com.hospital.doctor_service.controller.DoctorController.getDoctorByUserId(DoctorController.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.controller.DoctorController$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-06 01:18:29 [http-nio-8086-exec-1] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 01:18:29 [http-nio-8086-exec-1] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 01:18:29 [http-nio-8086-exec-1] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 01:18:29 [http-nio-8086-exec-1] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 18 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}, Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}]
2025-05-06 01:18:29 [http-nio-8086-exec-1] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}, Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}]
2025-05-06 01:18:29 [http-nio-8086-exec-4] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 01:18:29 [http-nio-8086-exec-4] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 01:18:29 [http-nio-8086-exec-4] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 01:18:29 [http-nio-8086-exec-4] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 19 ms | Result: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}, Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}]
2025-05-06 01:18:29 [http-nio-8086-exec-4] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Neurology', email='drkhan@example.com', phone='9876543210', userId=2}, Doctor{id=2, name='drverma', specialization='Dermatology', email='drverma@example.com', phone='9998887777', userId=3}, Doctor{id=3, name='drram', specialization='Dermatology', email='drram@example.com', phone='8795746389', userId=9}, Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=null}]
2025-05-06 01:19:38 [http-nio-8086-exec-3] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 11
2025-05-06 01:19:38 [http-nio-8086-exec-3] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 01:19:38 [http-nio-8086-exec-3] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 11
2025-05-06 01:19:38 [http-nio-8086-exec-3] ERROR c.h.d.service.impl.DoctorServiceImpl - Doctor not found with userId: 11
2025-05-06 01:19:38 [http-nio-8086-exec-3] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorServiceImpl.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:19:38 [http-nio-8086-exec-3] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorController.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:19:38 [http-nio-8086-exec-3] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Doctor not found with userId: 11] with root cause
java.lang.RuntimeException: Doctor not found with userId: 11
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.getDoctorByUserId(DoctorServiceImpl.java:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hospital.doctor_service.aop.LoggingAspect.logAroundService(LoggingAspect.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at com.hospital.doctor_service.controller.DoctorController.getDoctorByUserId(DoctorController.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.controller.DoctorController$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-06 01:19:38 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 11
2025-05-06 01:19:38 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 01:19:38 [http-nio-8086-exec-7] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 11
2025-05-06 01:19:38 [http-nio-8086-exec-7] ERROR c.h.d.service.impl.DoctorServiceImpl - Doctor not found with userId: 11
2025-05-06 01:19:38 [http-nio-8086-exec-7] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorServiceImpl.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:19:38 [http-nio-8086-exec-7] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorController.getDoctorByUserId() - Exception: Doctor not found with userId: 11 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 01:19:38 [http-nio-8086-exec-7] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Doctor not found with userId: 11] with root cause
java.lang.RuntimeException: Doctor not found with userId: 11
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.getDoctorByUserId(DoctorServiceImpl.java:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hospital.doctor_service.aop.LoggingAspect.logAroundService(LoggingAspect.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at com.hospital.doctor_service.controller.DoctorController.getDoctorByUserId(DoctorController.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.controller.DoctorController$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-06 01:20:29 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 01:22:00 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 11
2025-05-06 01:22:00 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 01:22:00 [http-nio-8086-exec-9] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 11
2025-05-06 01:22:00 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 9 ms | Result: Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=11}
2025-05-06 01:22:00 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=11}
2025-05-06 01:22:00 [http-nio-8086-exec-8] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 11
2025-05-06 01:22:00 [http-nio-8086-exec-8] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 01:22:00 [http-nio-8086-exec-8] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 11
2025-05-06 01:22:00 [http-nio-8086-exec-8] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 4 ms | Result: Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=11}
2025-05-06 01:22:00 [http-nio-8086-exec-8] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=4, name='drrahul', specialization='surgeon', email='rahul@example.com', phone='6754678976', userId=11}
2025-05-06 06:35:37 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=5h13m40s416ms42µs900ns).
2025-05-06 06:38:39 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 06:43:39 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 06:48:39 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 06:53:39 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 06:58:39 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:03:39 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:08:39 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:13:39 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:18:39 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:23:39 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:28:39 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:33:39 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:38:39 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:41:31 [http-nio-8086-exec-10] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.saveDoctor() with arguments: Doctor{id=null, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}
2025-05-06 07:41:31 [http-nio-8086-exec-10] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.saveDoctor()
2025-05-06 07:41:31 [http-nio-8086-exec-10] DEBUG c.h.d.service.impl.DoctorServiceImpl - Saving doctor: Doctor{id=null, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}
2025-05-06 07:41:31 [http-nio-8086-exec-10] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.saveDoctor() in 125 ms | Result: Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}
2025-05-06 07:41:31 [http-nio-8086-exec-10] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.saveDoctor() with response: Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}
2025-05-06 07:42:24 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.saveDoctor() with arguments: Doctor{id=null, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}
2025-05-06 07:42:24 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.saveDoctor()
2025-05-06 07:42:24 [http-nio-8086-exec-2] DEBUG c.h.d.service.impl.DoctorServiceImpl - Saving doctor: Doctor{id=null, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}
2025-05-06 07:42:24 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.saveDoctor() in 16 ms | Result: Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}
2025-05-06 07:42:24 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.saveDoctor() with response: Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}
2025-05-06 07:43:19 [http-nio-8086-exec-1] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.saveDoctor() with arguments: Doctor{id=null, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}
2025-05-06 07:43:19 [http-nio-8086-exec-1] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.saveDoctor()
2025-05-06 07:43:19 [http-nio-8086-exec-1] DEBUG c.h.d.service.impl.DoctorServiceImpl - Saving doctor: Doctor{id=null, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}
2025-05-06 07:43:19 [http-nio-8086-exec-1] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.saveDoctor() in 7 ms | Result: Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}
2025-05-06 07:43:19 [http-nio-8086-exec-1] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.saveDoctor() with response: Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}
2025-05-06 07:43:40 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:44:37 [http-nio-8086-exec-6] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.saveDoctor() with arguments: Doctor{id=null, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}
2025-05-06 07:44:37 [http-nio-8086-exec-6] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.saveDoctor()
2025-05-06 07:44:37 [http-nio-8086-exec-6] DEBUG c.h.d.service.impl.DoctorServiceImpl - Saving doctor: Doctor{id=null, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}
2025-05-06 07:44:37 [http-nio-8086-exec-6] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.saveDoctor() in 0 ms | Result: Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}
2025-05-06 07:44:37 [http-nio-8086-exec-6] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.saveDoctor() with response: Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}
2025-05-06 07:47:10 [http-nio-8086-exec-5] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:47:10 [http-nio-8086-exec-5] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:47:10 [http-nio-8086-exec-5] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:47:10 [http-nio-8086-exec-5] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 157 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:10 [http-nio-8086-exec-5] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:10 [http-nio-8086-exec-3] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:47:10 [http-nio-8086-exec-3] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:47:10 [http-nio-8086-exec-3] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:47:10 [http-nio-8086-exec-3] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 9 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:10 [http-nio-8086-exec-3] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:19 [http-nio-8086-exec-8] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:47:19 [http-nio-8086-exec-8] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:47:19 [http-nio-8086-exec-8] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:47:19 [http-nio-8086-exec-8] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 14 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:19 [http-nio-8086-exec-8] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:19 [http-nio-8086-exec-10] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:47:19 [http-nio-8086-exec-10] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:47:19 [http-nio-8086-exec-10] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:47:19 [http-nio-8086-exec-10] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 22 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:19 [http-nio-8086-exec-10] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:26 [http-nio-8086-exec-4] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:47:26 [http-nio-8086-exec-4] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:47:26 [http-nio-8086-exec-4] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:47:26 [http-nio-8086-exec-4] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 16 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:26 [http-nio-8086-exec-4] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:26 [http-nio-8086-exec-6] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:47:26 [http-nio-8086-exec-6] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:47:26 [http-nio-8086-exec-6] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:47:26 [http-nio-8086-exec-6] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 12 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:26 [http-nio-8086-exec-6] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:33 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:47:33 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:47:33 [http-nio-8086-exec-7] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:47:33 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 15 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:33 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:33 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:47:33 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:47:33 [http-nio-8086-exec-9] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:47:33 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 26 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:33 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=null}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=null}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=null}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=null}]
2025-05-06 07:47:50 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 5
2025-05-06 07:47:50 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 07:47:50 [http-nio-8086-exec-2] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 5
2025-05-06 07:47:50 [http-nio-8086-exec-2] ERROR c.h.d.service.impl.DoctorServiceImpl - Doctor not found with userId: 5
2025-05-06 07:47:50 [http-nio-8086-exec-2] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorServiceImpl.getDoctorByUserId() - Exception: Doctor not found with userId: 5 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 07:47:50 [http-nio-8086-exec-2] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorController.getDoctorByUserId() - Exception: Doctor not found with userId: 5 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 07:47:50 [http-nio-8086-exec-2] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Doctor not found with userId: 5] with root cause
java.lang.RuntimeException: Doctor not found with userId: 5
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.getDoctorByUserId(DoctorServiceImpl.java:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hospital.doctor_service.aop.LoggingAspect.logAroundService(LoggingAspect.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at com.hospital.doctor_service.controller.DoctorController.getDoctorByUserId(DoctorController.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.controller.DoctorController$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-06 07:47:50 [http-nio-8086-exec-1] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 5
2025-05-06 07:47:50 [http-nio-8086-exec-1] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 07:47:50 [http-nio-8086-exec-1] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 5
2025-05-06 07:47:50 [http-nio-8086-exec-1] ERROR c.h.d.service.impl.DoctorServiceImpl - Doctor not found with userId: 5
2025-05-06 07:47:50 [http-nio-8086-exec-1] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorServiceImpl.getDoctorByUserId() - Exception: Doctor not found with userId: 5 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 07:47:50 [http-nio-8086-exec-1] ERROR c.h.doctor_service.aop.LoggingAspect - ❌ [ERROR] In DoctorController.getDoctorByUserId() - Exception: Doctor not found with userId: 5 - Stack Trace: com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
2025-05-06 07:47:50 [http-nio-8086-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Doctor not found with userId: 5] with root cause
java.lang.RuntimeException: Doctor not found with userId: 5
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.lambda$getDoctorByUserId$1(DoctorServiceImpl.java:52)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl.getDoctorByUserId(DoctorServiceImpl.java:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hospital.doctor_service.aop.LoggingAspect.logAroundService(LoggingAspect.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.service.impl.DoctorServiceImpl$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at com.hospital.doctor_service.controller.DoctorController.getDoctorByUserId(DoctorController.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.hospital.doctor_service.controller.DoctorController$$SpringCGLIB$$0.getDoctorByUserId(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-06 07:48:40 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:52:59 [http-nio-8086-exec-4] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 5
2025-05-06 07:52:59 [http-nio-8086-exec-4] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 07:52:59 [http-nio-8086-exec-4] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 5
2025-05-06 07:52:59 [http-nio-8086-exec-4] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 14 ms | Result: Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}
2025-05-06 07:52:59 [http-nio-8086-exec-4] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}
2025-05-06 07:52:59 [http-nio-8086-exec-6] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 5
2025-05-06 07:52:59 [http-nio-8086-exec-6] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 07:52:59 [http-nio-8086-exec-6] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 5
2025-05-06 07:52:59 [http-nio-8086-exec-6] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 7 ms | Result: Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}
2025-05-06 07:52:59 [http-nio-8086-exec-6] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}
2025-05-06 07:53:27 [http-nio-8086-exec-5] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 7
2025-05-06 07:53:27 [http-nio-8086-exec-5] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 07:53:27 [http-nio-8086-exec-5] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 7
2025-05-06 07:53:27 [http-nio-8086-exec-5] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 8 ms | Result: Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}
2025-05-06 07:53:27 [http-nio-8086-exec-5] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}
2025-05-06 07:53:27 [http-nio-8086-exec-3] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 7
2025-05-06 07:53:27 [http-nio-8086-exec-3] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 07:53:27 [http-nio-8086-exec-3] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 7
2025-05-06 07:53:27 [http-nio-8086-exec-3] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 8 ms | Result: Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}
2025-05-06 07:53:27 [http-nio-8086-exec-3] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}
2025-05-06 07:53:40 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:53:42 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 5
2025-05-06 07:53:42 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 07:53:42 [http-nio-8086-exec-7] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 5
2025-05-06 07:53:42 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 13 ms | Result: Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}
2025-05-06 07:53:42 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}
2025-05-06 07:53:43 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 5
2025-05-06 07:53:43 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 07:53:43 [http-nio-8086-exec-9] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 5
2025-05-06 07:53:43 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 7 ms | Result: Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}
2025-05-06 07:53:43 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}
2025-05-06 07:53:53 [http-nio-8086-exec-10] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 6
2025-05-06 07:53:53 [http-nio-8086-exec-10] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 07:53:53 [http-nio-8086-exec-10] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 6
2025-05-06 07:53:53 [http-nio-8086-exec-10] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 19 ms | Result: Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}
2025-05-06 07:53:53 [http-nio-8086-exec-10] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}
2025-05-06 07:53:53 [http-nio-8086-exec-8] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 6
2025-05-06 07:53:53 [http-nio-8086-exec-8] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 07:53:53 [http-nio-8086-exec-8] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 6
2025-05-06 07:53:53 [http-nio-8086-exec-8] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 18 ms | Result: Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}
2025-05-06 07:53:53 [http-nio-8086-exec-8] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}
2025-05-06 07:54:03 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 8
2025-05-06 07:54:03 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 07:54:03 [http-nio-8086-exec-2] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 8
2025-05-06 07:54:03 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 4 ms | Result: Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}
2025-05-06 07:54:03 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}
2025-05-06 07:54:03 [http-nio-8086-exec-1] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 8
2025-05-06 07:54:03 [http-nio-8086-exec-1] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 07:54:03 [http-nio-8086-exec-1] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 8
2025-05-06 07:54:03 [http-nio-8086-exec-1] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 7 ms | Result: Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}
2025-05-06 07:54:03 [http-nio-8086-exec-1] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}
2025-05-06 07:54:22 [http-nio-8086-exec-4] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:54:22 [http-nio-8086-exec-4] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:54:22 [http-nio-8086-exec-4] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:54:22 [http-nio-8086-exec-4] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 9 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:54:22 [http-nio-8086-exec-4] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:54:22 [http-nio-8086-exec-6] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:54:22 [http-nio-8086-exec-6] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:54:22 [http-nio-8086-exec-6] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:54:22 [http-nio-8086-exec-6] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 12 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:54:22 [http-nio-8086-exec-6] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:55:32 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:55:32 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:55:32 [http-nio-8086-exec-7] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:55:32 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 13 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:55:32 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:55:32 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:55:32 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:55:32 [http-nio-8086-exec-9] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:55:32 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 15 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:55:32 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:55:41 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:55:41 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:55:41 [http-nio-8086-exec-2] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:55:41 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 38 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:55:41 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:55:42 [http-nio-8086-exec-1] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:55:42 [http-nio-8086-exec-1] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:55:42 [http-nio-8086-exec-1] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:55:42 [http-nio-8086-exec-1] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 8 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:55:42 [http-nio-8086-exec-1] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:56:13 [http-nio-8086-exec-5] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorById() with arguments: 2
2025-05-06 07:56:13 [http-nio-8086-exec-5] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorById()
2025-05-06 07:56:13 [http-nio-8086-exec-5] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by ID: 2
2025-05-06 07:56:13 [http-nio-8086-exec-5] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorById() in 15 ms | Result: Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}
2025-05-06 07:56:13 [http-nio-8086-exec-5] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorById() with response: Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}
2025-05-06 07:56:34 [http-nio-8086-exec-3] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 6
2025-05-06 07:56:34 [http-nio-8086-exec-3] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 07:56:34 [http-nio-8086-exec-3] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 6
2025-05-06 07:56:34 [http-nio-8086-exec-3] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 6 ms | Result: Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}
2025-05-06 07:56:34 [http-nio-8086-exec-3] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}
2025-05-06 07:56:34 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorByUserId() with arguments: 6
2025-05-06 07:56:34 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorByUserId()
2025-05-06 07:56:34 [http-nio-8086-exec-7] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by userId: 6
2025-05-06 07:56:34 [http-nio-8086-exec-7] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorByUserId() in 4 ms | Result: Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}
2025-05-06 07:56:34 [http-nio-8086-exec-7] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorByUserId() with response: Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}
2025-05-06 07:56:49 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:56:49 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:56:49 [http-nio-8086-exec-9] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:56:49 [http-nio-8086-exec-9] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 16 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:56:49 [http-nio-8086-exec-9] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:56:49 [http-nio-8086-exec-10] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:56:49 [http-nio-8086-exec-10] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:56:49 [http-nio-8086-exec-10] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:56:49 [http-nio-8086-exec-10] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 16 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:56:49 [http-nio-8086-exec-10] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:58:31 [http-nio-8086-exec-4] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getDoctorById() with arguments: 2
2025-05-06 07:58:31 [http-nio-8086-exec-4] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getDoctorById()
2025-05-06 07:58:31 [http-nio-8086-exec-4] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching doctor by ID: 2
2025-05-06 07:58:31 [http-nio-8086-exec-4] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getDoctorById() in 0 ms | Result: Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}
2025-05-06 07:58:31 [http-nio-8086-exec-4] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getDoctorById() with response: Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}
2025-05-06 07:58:40 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:58:53 [http-nio-8086-exec-6] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:58:53 [http-nio-8086-exec-6] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:58:53 [http-nio-8086-exec-6] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:58:53 [http-nio-8086-exec-6] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 15 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:58:53 [http-nio-8086-exec-6] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:58:53 [http-nio-8086-exec-5] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:58:53 [http-nio-8086-exec-5] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:58:53 [http-nio-8086-exec-5] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:58:53 [http-nio-8086-exec-5] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 14 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:58:53 [http-nio-8086-exec-5] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:59:51 [http-nio-8086-exec-10] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:59:51 [http-nio-8086-exec-10] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:59:51 [http-nio-8086-exec-10] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:59:51 [http-nio-8086-exec-10] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 10 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:59:51 [http-nio-8086-exec-10] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:59:51 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ▶️ [CONTROLLER] Entering: DoctorController.getAllDoctors() with arguments: []
2025-05-06 07:59:51 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏳ [SERVICE] Starting: DoctorServiceImpl.getAllDoctors()
2025-05-06 07:59:51 [http-nio-8086-exec-2] DEBUG c.h.d.service.impl.DoctorServiceImpl - Fetching all doctors
2025-05-06 07:59:51 [http-nio-8086-exec-2] DEBUG c.h.doctor_service.aop.LoggingAspect - ⏱️ [SERVICE] Completed: DoctorServiceImpl.getAllDoctors() in 14 ms | Result: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 07:59:51 [http-nio-8086-exec-2] INFO  c.h.doctor_service.aop.LoggingAspect - ✅ [CONTROLLER] Exiting: DoctorController.getAllDoctors() with response: [Doctor{id=1, name='drkhan', specialization='Dermatologist', email='drkhan@example.com', phone='8978654678', userId=5}, Doctor{id=2, name='drsharma', specialization='Cardiologist', email='drsharma@example.com', phone='8769876547', userId=6}, Doctor{id=3, name='drverma', specialization='Neurologist', email='drverma@example.com', phone='8976890765', userId=7}, Doctor{id=4, name='drsmith', specialization='Orthopedic Surgeon', email='drsmith@example.com', phone='9878657865', userId=8}]
2025-05-06 08:03:40 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 08:08:40 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
