2025-05-06 00:39:41.057 [main] INFO  c.e.a.AuthenticationServiceApplication - Starting AuthenticationServiceApplication using Java 23.0.1 with PID 17832 (C:\Users\Asus\Downloads\hospital-management-system\authentication-service\target\classes started by Asus in C:\Users\Asus\Downloads\hospital-management-system\authentication-service)
2025-05-06 00:39:41.057 [main] DEBUG c.e.a.AuthenticationServiceApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-05-06 00:39:41.057 [main] INFO  c.e.a.AuthenticationServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-06 00:39:42.053 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-06 00:39:42.194 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 122 ms. Found 1 JPA repository interface.
2025-05-06 00:39:42.397 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=9351e181-bcbf-32b0-8eaf-d8e955f18969
2025-05-06 00:39:42.772 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$RetryInterceptorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$RetryInterceptorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [lbRestClientPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-05-06 00:39:42.772 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration' of type [org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.772 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration' of type [org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.788 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.788 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.788 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda/0x000001d6b84ee400] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.803 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.803 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.cloud.loadbalancer-org.springframework.cloud.client.loadbalancer.LoadBalancerClientsProperties' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerClientsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.819 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'default.org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration.LoadBalancerClientSpecification' of type [org.springframework.cloud.loadbalancer.annotation.LoadBalancerClientSpecification] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.819 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'default.org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration.LoadBalancerClientSpecification' of type [org.springframework.cloud.loadbalancer.annotation.LoadBalancerClientSpecification] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.819 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'default.org.springframework.cloud.netflix.eureka.loadbalancer.LoadBalancerEurekaAutoConfiguration.LoadBalancerClientSpecification' of type [org.springframework.cloud.loadbalancer.annotation.LoadBalancerClientSpecification] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.819 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'loadBalancerClientFactory' of type [org.springframework.cloud.loadbalancer.support.LoadBalancerClientFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.835 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'blockingLoadBalancerClient' of type [org.springframework.cloud.loadbalancer.blocking.client.BlockingLoadBalancerClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.850 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'loadBalancerServiceInstanceCookieTransformer' of type [org.springframework.cloud.loadbalancer.core.LoadBalancerServiceInstanceCookieTransformer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.850 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'xForwarderHeadersTransformer' of type [org.springframework.cloud.loadbalancer.blocking.XForwardedHeadersTransformer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.850 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.866 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'loadBalancerRequestFactory' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerRequestFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.866 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerRetryConfig' of type [org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerRetryConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.866 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'loadBalancedRetryFactory' of type [org.springframework.cloud.loadbalancer.blocking.retry.BlockingLoadBalancedRetryFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:42.866 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'loadBalancerInterceptor' of type [org.springframework.cloud.client.loadbalancer.RetryLoadBalancerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-05-06 00:39:43.210 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8088 (http)
2025-05-06 00:39:43.225 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-06 00:39:43.225 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-05-06 00:39:43.303 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-06 00:39:43.303 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2178 ms
2025-05-06 00:39:43.491 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-06 00:39:43.569 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-05-06 00:39:43.600 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@448892f1
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@448892f1
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@448892f1
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1626bddf
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1626bddf
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@29532e91
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@29532e91
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@7e691624
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@7e691624
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@7ef60c02
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@7ef60c02
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@7ef60c02
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@5d9d8e46
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@5d9d8e46
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@5d9d8e46
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@6d0a14c2
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@6d0a14c2
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@5b64f771
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@153c6603
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@153c6603
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@24e2355c
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@19739906
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@65503a26
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@65503a26
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@65503a26
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@13aa54f1
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@13aa54f1
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@13aa54f1
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@26d7cb0d
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@26d7cb0d
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@26d7cb0d
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@23e9dd78
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@23e9dd78
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@23e9dd78
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@470c4229
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@470c4229
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@470c4229
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@6408be5
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@6408be5
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1e57b783
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1e57b783
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@73b8ab2c
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@73b8ab2c
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@73b8ab2c
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5600a278
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@549d14fe
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@549d14fe
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@77d54a41
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@41026e5c
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@41026e5c
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@41026e5c
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@12421766
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@2e44cb34
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@731e0bff
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@213ceb4e
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@213ceb4e
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@23c72128
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@23c72128
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@2bd2430f
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@2890e479
2025-05-06 00:39:43.663 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@6eb00cbe
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@74e4be21
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@4d174189
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@628bd77e
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@c30f26d
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@c30f26d
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@5d74507c
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@5d74507c
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@2a984952
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@2a984952
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@16944b58
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@16944b58
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@1dbc607d
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@1dbc607d
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@62b42406
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@a0e33db
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@3ef46749
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@3ef46749
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@40b54762
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@362cf66
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7809b43a
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@65da4a5d
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@65da4a5d
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@fbe8fd3
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1ab268bd
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@2fafa7b5
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@2fafa7b5
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@181098bf
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@181098bf
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@632b5c79
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@632b5c79
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@632b5c79
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@6a552721
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@6a552721
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@6a552721
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@3815a7d1
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@24dc150c
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@1d2d4d7a
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@1d2d4d7a
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@5e020dd1
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@5e020dd1
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@5e020dd1
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4bbc02ef
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@f0c1ae1
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@783dc0e7
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@783dc0e7
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@361f26b4
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@361f26b4
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@361f26b4
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@1d9ff1e2
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@1d9ff1e2
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@722b3ba2
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@722b3ba2
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@6487f7f8
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@6487f7f8
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@2b62475a
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@2b62475a
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@4990b335
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4990b335
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration vector -> org.hibernate.type.BasicTypeReference@624d778e
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@39ae6408
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@31443680
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@31443680
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@321c2a7
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@14b48f39
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@c87787d
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1bea7b0
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@31433df9
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@2d4a0671
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@1ab9c735
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@6e4e60f5
2025-05-06 00:39:43.678 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@464a3430
2025-05-06 00:39:43.819 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-06 00:39:43.850 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-06 00:39:43.991 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2555a986
2025-05-06 00:39:43.991 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-06 00:39:44.038 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-06 00:39:44.038 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-05-06 00:39:44.069 [main] DEBUG o.h.t.d.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@71f10042) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5dbc4598)
2025-05-06 00:39:44.069 [main] DEBUG o.h.t.d.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1002d1c8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@38a27ace)
2025-05-06 00:39:44.069 [main] DEBUG o.h.t.d.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@41289e88) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7e8783b0)
2025-05-06 00:39:44.069 [main] DEBUG o.h.t.d.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@788d9139) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53d2f0ec)
2025-05-06 00:39:44.069 [main] DEBUG o.h.t.d.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@560be8c0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@14d36bb2)
2025-05-06 00:39:44.069 [main] DEBUG o.h.t.d.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@432448) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4452e13c)
2025-05-06 00:39:44.069 [main] DEBUG o.h.t.d.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4d964c9e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@42172065)
2025-05-06 00:39:44.069 [main] DEBUG o.h.t.d.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5b6f3d0b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8e77c5b)
2025-05-06 00:39:44.069 [main] DEBUG o.h.t.d.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@776a3365) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@c0521e5)
2025-05-06 00:39:44.069 [main] DEBUG o.h.t.d.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-05-06 00:39:44.069 [main] DEBUG o.h.t.d.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-05-06 00:39:44.069 [main] DEBUG o.h.t.d.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-05-06 00:39:44.069 [main] DEBUG o.h.t.d.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-05-06 00:39:44.069 [main] DEBUG o.h.t.d.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-05-06 00:39:44.069 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@38856d6e
2025-05-06 00:39:44.069 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@321c2a7`
2025-05-06 00:39:44.069 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.DurationType -> basicType@1(java.time.Duration,3015)
2025-05-06 00:39:44.069 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,3015)
2025-05-06 00:39:44.069 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,3015)
2025-05-06 00:39:44.085 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-05-06 00:39:44.085 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-05-06 00:39:44.085 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-05-06 00:39:44.085 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-05-06 00:39:44.085 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-05-06 00:39:44.085 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-05-06 00:39:44.085 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-05-06 00:39:44.085 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-05-06 00:39:44.085 [main] DEBUG o.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-05-06 00:39:44.085 [main] DEBUG o.h.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@5a654e05] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@121dac1a]
2025-05-06 00:39:44.807 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-06 00:39:44.807 [main] DEBUG o.h.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@5a654e05] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@49dacc93]
2025-05-06 00:39:44.870 [main] TRACE o.h.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@49dacc93] for TypeConfiguration
2025-05-06 00:39:44.870 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-06 00:39:45.307 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-06 00:39:45.698 [main] INFO  c.e.a.s.JwtAuthenticationFilter - JwtAuthenticationFilter initialized
2025-05-06 00:39:45.714 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
2025-05-06 00:39:45.714 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
2025-05-06 00:39:45.932 [main] INFO  o.s.b.web.servlet.RegistrationBean - Filter jwtFilterRegistration was not registered (disabled)
2025-05-06 00:39:46.201 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-05-06 00:39:46.279 [main] INFO  o.s.c.o.FeignClientFactoryBean - For 'doctor-service' URL not provided. Will try picking an instance via load-balancing.
2025-05-06 00:39:46.420 [main] INFO  o.s.c.o.FeignClientFactoryBean - For 'patient-service' URL not provided. Will try picking an instance via load-balancing.
2025-05-06 00:39:47.154 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 17 endpoint(s) beneath base path '/actuator'
2025-05-06 00:39:47.265 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3c7b89ae, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1723640f, org.springframework.security.web.context.SecurityContextHolderFilter@554a30fc, org.springframework.security.web.header.HeaderWriterFilter@6b951ee5, org.springframework.web.filter.CorsFilter@5dc83abb, org.springframework.security.web.authentication.logout.LogoutFilter@5a0379e2, com.example.authentication_service.security.JwtAuthenticationFilter@3f76c712, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@61ac8777, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@94d4dd, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@22876aea, org.springframework.security.web.session.SessionManagementFilter@73e3831e, org.springframework.security.web.access.ExceptionTranslationFilter@5fd40d2e, org.springframework.security.web.access.intercept.AuthorizationFilter@3d872a12]
2025-05-06 00:39:47.985 [main] INFO  o.s.c.n.e.c.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses RestTemplate.
2025-05-06 00:39:48.032 [main] WARN  o.s.c.l.c.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger - Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2025-05-06 00:39:48.110 [main] INFO  o.s.c.n.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2025-05-06 00:39:48.204 [main] INFO  c.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2025-05-06 00:39:48.204 [main] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:39:48.235 [main] INFO  c.netflix.discovery.DiscoveryClient - Disable delta property : false
2025-05-06 00:39:48.235 [main] INFO  c.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2025-05-06 00:39:48.235 [main] INFO  c.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2025-05-06 00:39:48.235 [main] INFO  c.netflix.discovery.DiscoveryClient - Application is null : false
2025-05-06 00:39:48.235 [main] INFO  c.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2025-05-06 00:39:48.235 [main] INFO  c.netflix.discovery.DiscoveryClient - Application version is -1: true
2025-05-06 00:39:48.235 [main] INFO  c.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2025-05-06 00:39:48.548 [main] INFO  c.netflix.discovery.DiscoveryClient - The response status is 200
2025-05-06 00:39:48.548 [main] INFO  c.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 10
2025-05-06 00:39:48.548 [main] INFO  c.n.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2025-05-06 00:39:48.548 [main] INFO  c.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1746472188548 with initial instances count: 4
2025-05-06 00:39:48.579 [main] INFO  o.s.c.n.e.s.EurekaServiceRegistry - Registering application AUTHENTICATION-SERVICE with eureka with status UP
2025-05-06 00:39:48.579 [main] INFO  c.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1746472188579, current=UP, previous=STARTING]
2025-05-06 00:39:48.579 [DiscoveryClient-InstanceInfoReplicator-0] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_AUTHENTICATION-SERVICE/authentication-service:680c7ac57cd2f7d342859723285807d2: registering service...
2025-05-06 00:39:48.595 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8088 (http) with context path ''
2025-05-06 00:39:48.595 [main] INFO  o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 8088
2025-05-06 00:39:48.610 [main] INFO  c.e.a.AuthenticationServiceApplication - Started AuthenticationServiceApplication in 7.971 seconds (process running for 8.381)
2025-05-06 00:39:48.626 [DiscoveryClient-InstanceInfoReplicator-0] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_AUTHENTICATION-SERVICE/authentication-service:680c7ac57cd2f7d342859723285807d2 - registration status: 204
2025-05-06 00:41:44.366 [http-nio-8088-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-06 00:41:44.366 [http-nio-8088-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-06 00:41:44.382 [http-nio-8088-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 16 ms
2025-05-06 00:41:44.413 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 00:41:44.444 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 00:41:44.444 [http-nio-8088-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 00:41:44.444 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 00:41:44.491 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='aman123', password=****]
2025-05-06 00:41:44.648 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 00:41:44.802 [http-nio-8088-exec-2] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 00:41:44.817 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 00:41:44.850 [http-nio-8088-exec-2] INFO  c.e.a.controller.AuthController - Login successful for user: aman123
2025-05-06 00:41:44.851 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='aman123@example.com', role='PATIENT', id=1, username='aman123'}
2025-05-06 00:42:58.372 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 00:42:58.379 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 00:42:58.379 [http-nio-8088-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 00:42:58.379 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 00:42:58.379 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drram', password=****]
2025-05-06 00:42:58.379 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 00:42:58.457 [http-nio-8088-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 00:42:58.472 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 00:42:58.472 [http-nio-8088-exec-5] INFO  c.e.a.controller.AuthController - Login successful for user: drram
2025-05-06 00:42:58.472 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='drram@example.com', role='DOCTOR', id=9, username='drram'}
2025-05-06 00:43:52.652 [http-nio-8088-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 00:43:52.657 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 00:43:52.658 [http-nio-8088-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 00:43:52.659 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 00:43:52.659 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='hospitaloperator1', password=****]
2025-05-06 00:43:52.659 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 00:43:52.737 [http-nio-8088-exec-8] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 00:43:52.737 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 00:43:52.737 [http-nio-8088-exec-8] INFO  c.e.a.controller.AuthController - Login successful for user: hospitaloperator1
2025-05-06 00:43:52.737 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='hospital@example.com', role='HOSPITALOPERATOR', id=6, username='hospitaloperator1'}
2025-05-06 00:44:48.243 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:45:33.626 [http-nio-8088-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 00:45:33.632 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 00:45:33.632 [http-nio-8088-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 00:45:33.632 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 00:45:33.632 [http-nio-8088-exec-1] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='aman123', password=****]
2025-05-06 00:45:33.632 [http-nio-8088-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 00:45:33.709 [http-nio-8088-exec-1] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 00:45:33.709 [http-nio-8088-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 00:45:33.725 [http-nio-8088-exec-1] INFO  c.e.a.controller.AuthController - Login successful for user: aman123
2025-05-06 00:45:33.725 [http-nio-8088-exec-1] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='aman123@example.com', role='PATIENT', id=1, username='aman123'}
2025-05-06 00:46:01.535 [http-nio-8088-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 00:46:01.541 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 00:46:01.542 [http-nio-8088-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 00:46:01.543 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 00:46:01.544 [http-nio-8088-exec-6] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='hospitaloperator1', password=****]
2025-05-06 00:46:01.544 [http-nio-8088-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 00:46:01.621 [http-nio-8088-exec-6] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 00:46:01.621 [http-nio-8088-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 00:46:01.621 [http-nio-8088-exec-6] INFO  c.e.a.controller.AuthController - Login successful for user: hospitaloperator1
2025-05-06 00:46:01.621 [http-nio-8088-exec-6] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='hospital@example.com', role='HOSPITALOPERATOR', id=6, username='hospitaloperator1'}
2025-05-06 00:46:23.075 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 00:46:23.080 [http-nio-8088-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 00:46:23.082 [http-nio-8088-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 00:46:23.083 [http-nio-8088-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 00:46:23.084 [http-nio-8088-exec-4] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='aman123', password=****]
2025-05-06 00:46:23.084 [http-nio-8088-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 00:46:23.162 [http-nio-8088-exec-4] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 00:46:23.162 [http-nio-8088-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 00:46:23.162 [http-nio-8088-exec-4] INFO  c.e.a.controller.AuthController - Login successful for user: aman123
2025-05-06 00:46:23.162 [http-nio-8088-exec-4] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='aman123@example.com', role='PATIENT', id=1, username='aman123'}
2025-05-06 00:49:48.257 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:54:48.262 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 00:59:48.277 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 01:04:48.283 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 01:06:39.943 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/register
2025-05-06 01:06:39.963 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/register
2025-05-06 01:06:39.966 [http-nio-8088-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 01:06:39.968 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/register
2025-05-06 01:06:40.350 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.registerUser() with arguments: [RegisterRequest{username='kamal', email='kamal@example.com', password=****, role=PATIENT, specialization='null', phone='null'}]
2025-05-06 01:06:40.352 [http-nio-8088-exec-9] DEBUG c.e.a.aop.LoggingAspect - ⏳ [AUTH-SERVICE] Starting: UserService.registerUser()
2025-05-06 01:06:40.456 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-05-06 01:06:40.472 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-05-06 01:06:40.748 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (email, email_verified, password, role, username, verification_token) 
    values
        (?, ?, ?, ?, ?, ?)
2025-05-06 01:06:40.791 [http-nio-8088-exec-9] DEBUG c.e.a.aop.LoggingAspect - ⏱️ [AUTH-SERVICE] Completed: UserService.registerUser() in 434 ms | Result: User{id=10, username='kamal', email='kamal@example.com', role=PATIENT, emailVerified=false}
2025-05-06 01:06:40.792 [http-nio-8088-exec-9] INFO  c.e.a.controller.AuthController - Registration successful for user: kamal@example.com
2025-05-06 01:06:40.792 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.registerUser() with response: AuthResponse{token=****, message='User registered successfully! Please check your email for verification.', email='kamal@example.com', role='PATIENT', id=10, username='kamal'}
2025-05-06 01:07:54.161 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/register
2025-05-06 01:07:54.170 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/register
2025-05-06 01:07:54.171 [http-nio-8088-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 01:07:54.171 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/register
2025-05-06 01:07:54.175 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.registerUser() with arguments: [RegisterRequest{username='drrahul', email='rahul@example.com', password=****, role=DOCTOR, specialization='surgeon', phone='6754678976'}]
2025-05-06 01:07:54.176 [http-nio-8088-exec-2] DEBUG c.e.a.aop.LoggingAspect - ⏳ [AUTH-SERVICE] Starting: UserService.registerUser()
2025-05-06 01:07:54.178 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-05-06 01:07:54.181 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-05-06 01:07:54.263 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (email, email_verified, password, role, username, verification_token) 
    values
        (?, ?, ?, ?, ?, ?)
2025-05-06 01:07:54.942 [http-nio-8088-exec-2] DEBUG c.e.a.aop.LoggingAspect - ⏱️ [AUTH-SERVICE] Completed: UserService.registerUser() in 765 ms | Result: User{id=11, username='drrahul', email='rahul@example.com', role=DOCTOR, emailVerified=false}
2025-05-06 01:07:54.943 [http-nio-8088-exec-2] INFO  c.e.a.controller.AuthController - Registration successful for user: rahul@example.com
2025-05-06 01:07:54.943 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.registerUser() with response: AuthResponse{token=****, message='User registered successfully! Please check your email for verification.', email='rahul@example.com', role='DOCTOR', id=11, username='drrahul'}
2025-05-06 01:08:43.893 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/register
2025-05-06 01:08:43.898 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/register
2025-05-06 01:08:43.899 [http-nio-8088-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 01:08:43.899 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/register
2025-05-06 01:08:43.901 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.registerUser() with arguments: [RegisterRequest{username='operator1', email='operator@example.com', password=****, role=HOSPITALOPERATOR, specialization='null', phone='6754678987'}]
2025-05-06 01:08:43.902 [http-nio-8088-exec-5] DEBUG c.e.a.aop.LoggingAspect - ⏳ [AUTH-SERVICE] Starting: UserService.registerUser()
2025-05-06 01:08:43.904 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-05-06 01:08:43.906 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-05-06 01:08:43.988 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (email, email_verified, password, role, username, verification_token) 
    values
        (?, ?, ?, ?, ?, ?)
2025-05-06 01:08:43.990 [http-nio-8088-exec-5] DEBUG c.e.a.aop.LoggingAspect - ⏱️ [AUTH-SERVICE] Completed: UserService.registerUser() in 88 ms | Result: User{id=12, username='operator1', email='operator@example.com', role=HOSPITALOPERATOR, emailVerified=false}
2025-05-06 01:08:43.990 [http-nio-8088-exec-5] INFO  c.e.a.controller.AuthController - Registration successful for user: operator@example.com
2025-05-06 01:08:43.991 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.registerUser() with response: AuthResponse{token=****, message='User registered successfully! Please check your email for verification.', email='operator@example.com', role='HOSPITALOPERATOR', id=12, username='operator1'}
2025-05-06 01:09:48.294 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 01:10:55.690 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/auth/verify?token=7c244c8d-48c8-44f1-9372-f9a5928d0ef2
2025-05-06 01:10:55.691 [http-nio-8088-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 01:10:55.693 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/auth/verify?token=7c244c8d-48c8-44f1-9372-f9a5928d0ef2
2025-05-06 01:10:55.714 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.verifyEmail() with arguments: [7c244c8d-48c8-44f1-9372-f9a5928d0ef2]
2025-05-06 01:10:55.722 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.verification_token=?
2025-05-06 01:10:57.047 [http-nio-8088-exec-8] INFO  c.e.a.controller.AuthController - Patient record created in patient-service for: kamal@example.com
2025-05-06 01:10:57.048 [http-nio-8088-exec-8] INFO  c.e.a.controller.AuthController - Email verified successfully for user: kamal@example.com
2025-05-06 01:10:57.048 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.verifyEmail() with response: Email verified successfully!
2025-05-06 01:10:57.070 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        email_verified=?,
        password=?,
        role=?,
        username=?,
        verification_token=? 
    where
        id=?
2025-05-06 01:11:10.176 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/auth/verify?token=8f251037-2155-4acc-9540-a45c0ebc0145
2025-05-06 01:11:10.178 [http-nio-8088-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 01:11:10.180 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/auth/verify?token=8f251037-2155-4acc-9540-a45c0ebc0145
2025-05-06 01:11:10.185 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.verifyEmail() with arguments: [8f251037-2155-4acc-9540-a45c0ebc0145]
2025-05-06 01:11:10.188 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.verification_token=?
2025-05-06 01:11:10.191 [http-nio-8088-exec-9] INFO  c.e.a.controller.AuthController - Email verified successfully for user: rahul@example.com
2025-05-06 01:11:10.191 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.verifyEmail() with response: Email verified successfully!
2025-05-06 01:11:10.193 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        email_verified=?,
        password=?,
        role=?,
        username=?,
        verification_token=? 
    where
        id=?
2025-05-06 01:11:22.487 [http-nio-8088-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/auth/verify?token=f8ec8331-093e-4c36-85aa-a5da5b68c844
2025-05-06 01:11:22.489 [http-nio-8088-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 01:11:22.490 [http-nio-8088-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/auth/verify?token=f8ec8331-093e-4c36-85aa-a5da5b68c844
2025-05-06 01:11:22.492 [http-nio-8088-exec-10] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.verifyEmail() with arguments: [f8ec8331-093e-4c36-85aa-a5da5b68c844]
2025-05-06 01:11:22.495 [http-nio-8088-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.verification_token=?
2025-05-06 01:11:22.499 [http-nio-8088-exec-10] INFO  c.e.a.controller.AuthController - Email verified successfully for user: operator@example.com
2025-05-06 01:11:22.499 [http-nio-8088-exec-10] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.verifyEmail() with response: Email verified successfully!
2025-05-06 01:11:22.501 [http-nio-8088-exec-10] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        email_verified=?,
        password=?,
        role=?,
        username=?,
        verification_token=? 
    where
        id=?
2025-05-06 01:11:36.956 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 01:11:36.960 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 01:11:36.961 [http-nio-8088-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 01:11:36.961 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 01:11:36.963 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='operator1', password=****]
2025-05-06 01:11:36.965 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 01:11:37.044 [http-nio-8088-exec-2] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 01:11:37.045 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 01:11:37.052 [http-nio-8088-exec-2] INFO  c.e.a.controller.AuthController - Login successful for user: operator1
2025-05-06 01:11:37.052 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='operator@example.com', role='HOSPITALOPERATOR', id=12, username='operator1'}
2025-05-06 01:12:04.415 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 01:12:04.419 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 01:12:04.420 [http-nio-8088-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 01:12:04.421 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 01:12:04.423 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drrahul', password=****]
2025-05-06 01:12:04.425 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 01:12:04.511 [http-nio-8088-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 01:12:04.513 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 01:12:04.516 [http-nio-8088-exec-5] INFO  c.e.a.controller.AuthController - Login successful for user: drrahul
2025-05-06 01:12:04.517 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='rahul@example.com', role='DOCTOR', id=11, username='drrahul'}
2025-05-06 01:12:32.045 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 01:12:32.051 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 01:12:32.052 [http-nio-8088-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 01:12:32.052 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 01:12:32.054 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='kamal', password=****]
2025-05-06 01:12:32.056 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 01:12:32.166 [http-nio-8088-exec-9] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 01:12:32.167 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 01:12:32.170 [http-nio-8088-exec-9] INFO  c.e.a.controller.AuthController - Login successful for user: kamal
2025-05-06 01:12:32.170 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='kamal@example.com', role='PATIENT', id=10, username='kamal'}
2025-05-06 01:14:48.300 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 01:17:35.644 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 01:17:35.651 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 01:17:35.653 [http-nio-8088-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 01:17:35.654 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 01:17:35.656 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drrahul', password=****]
2025-05-06 01:17:35.657 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 01:17:35.744 [http-nio-8088-exec-2] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 01:17:35.745 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 01:17:35.747 [http-nio-8088-exec-2] INFO  c.e.a.controller.AuthController - Login successful for user: drrahul
2025-05-06 01:17:35.748 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='rahul@example.com', role='DOCTOR', id=11, username='drrahul'}
2025-05-06 01:18:28.562 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 01:18:28.567 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 01:18:28.568 [http-nio-8088-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 01:18:28.569 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 01:18:28.571 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='operator1', password=****]
2025-05-06 01:18:28.572 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 01:18:28.664 [http-nio-8088-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 01:18:28.666 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 01:18:28.670 [http-nio-8088-exec-5] INFO  c.e.a.controller.AuthController - Login successful for user: operator1
2025-05-06 01:18:28.670 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='operator@example.com', role='HOSPITALOPERATOR', id=12, username='operator1'}
2025-05-06 01:19:37.457 [http-nio-8088-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 01:19:37.462 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 01:19:37.462 [http-nio-8088-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 01:19:37.463 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 01:19:37.465 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drrahul', password=****]
2025-05-06 01:19:37.467 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 01:19:37.545 [http-nio-8088-exec-8] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 01:19:37.546 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 01:19:37.550 [http-nio-8088-exec-8] INFO  c.e.a.controller.AuthController - Login successful for user: drrahul
2025-05-06 01:19:37.550 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='rahul@example.com', role='DOCTOR', id=11, username='drrahul'}
2025-05-06 01:19:48.306 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 06:35:35.708 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=5h13m20s999ms272µs600ns).
2025-05-06 06:37:58.706 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 06:42:58.716 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 06:47:58.724 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 06:52:58.737 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 06:57:58.739 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:02:58.745 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:07:58.761 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:12:58.762 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:17:58.766 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:22:58.771 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:27:58.773 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:32:58.786 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:36:10.513 [http-nio-8088-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/register
2025-05-06 07:36:10.544 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/register
2025-05-06 07:36:10.544 [http-nio-8088-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:36:10.560 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/register
2025-05-06 07:36:10.623 [http-nio-8088-exec-1] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.registerUser() with arguments: [RegisterRequest{username='user1', email='user1@example.com', password=****, role=PATIENT, specialization='null', phone='null'}]
2025-05-06 07:36:10.623 [http-nio-8088-exec-1] DEBUG c.e.a.aop.LoggingAspect - ⏳ [AUTH-SERVICE] Starting: UserService.registerUser()
2025-05-06 07:36:10.685 [http-nio-8088-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-05-06 07:36:10.701 [http-nio-8088-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-05-06 07:36:10.810 [http-nio-8088-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (email, email_verified, password, role, username, verification_token) 
    values
        (?, ?, ?, ?, ?, ?)
2025-05-06 07:36:10.826 [http-nio-8088-exec-1] DEBUG c.e.a.aop.LoggingAspect - ⏱️ [AUTH-SERVICE] Completed: UserService.registerUser() in 203 ms | Result: User{id=1, username='user1', email='user1@example.com', role=PATIENT, emailVerified=false}
2025-05-06 07:36:10.826 [http-nio-8088-exec-1] INFO  c.e.a.controller.AuthController - Registration successful for user: user1@example.com
2025-05-06 07:36:10.826 [http-nio-8088-exec-1] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.registerUser() with response: AuthResponse{token=****, message='User registered successfully! Please check your email for verification.', email='user1@example.com', role='PATIENT', id=1, username='user1'}
2025-05-06 07:37:06.933 [http-nio-8088-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/register
2025-05-06 07:37:06.943 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/register
2025-05-06 07:37:06.944 [http-nio-8088-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:37:06.945 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/register
2025-05-06 07:37:06.945 [http-nio-8088-exec-6] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.registerUser() with arguments: [RegisterRequest{username='user2', email='user2@example.com', password=****, role=PATIENT, specialization='null', phone='null'}]
2025-05-06 07:37:06.945 [http-nio-8088-exec-6] DEBUG c.e.a.aop.LoggingAspect - ⏳ [AUTH-SERVICE] Starting: UserService.registerUser()
2025-05-06 07:37:06.945 [http-nio-8088-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-05-06 07:37:06.945 [http-nio-8088-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-05-06 07:37:07.039 [http-nio-8088-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (email, email_verified, password, role, username, verification_token) 
    values
        (?, ?, ?, ?, ?, ?)
2025-05-06 07:37:07.039 [http-nio-8088-exec-6] DEBUG c.e.a.aop.LoggingAspect - ⏱️ [AUTH-SERVICE] Completed: UserService.registerUser() in 94 ms | Result: User{id=2, username='user2', email='user2@example.com', role=PATIENT, emailVerified=false}
2025-05-06 07:37:07.039 [http-nio-8088-exec-6] INFO  c.e.a.controller.AuthController - Registration successful for user: user2@example.com
2025-05-06 07:37:07.039 [http-nio-8088-exec-6] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.registerUser() with response: AuthResponse{token=****, message='User registered successfully! Please check your email for verification.', email='user2@example.com', role='PATIENT', id=2, username='user2'}
2025-05-06 07:37:53.184 [http-nio-8088-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/register
2025-05-06 07:37:53.189 [http-nio-8088-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/register
2025-05-06 07:37:53.189 [http-nio-8088-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:37:53.190 [http-nio-8088-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/register
2025-05-06 07:37:53.192 [http-nio-8088-exec-7] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.registerUser() with arguments: [RegisterRequest{username='user3', email='user3@example.com', password=****, role=PATIENT, specialization='null', phone='null'}]
2025-05-06 07:37:53.193 [http-nio-8088-exec-7] DEBUG c.e.a.aop.LoggingAspect - ⏳ [AUTH-SERVICE] Starting: UserService.registerUser()
2025-05-06 07:37:53.194 [http-nio-8088-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-05-06 07:37:53.197 [http-nio-8088-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-05-06 07:37:53.277 [http-nio-8088-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (email, email_verified, password, role, username, verification_token) 
    values
        (?, ?, ?, ?, ?, ?)
2025-05-06 07:37:53.277 [http-nio-8088-exec-7] DEBUG c.e.a.aop.LoggingAspect - ⏱️ [AUTH-SERVICE] Completed: UserService.registerUser() in 84 ms | Result: User{id=3, username='user3', email='user3@example.com', role=PATIENT, emailVerified=false}
2025-05-06 07:37:53.277 [http-nio-8088-exec-7] INFO  c.e.a.controller.AuthController - Registration successful for user: user3@example.com
2025-05-06 07:37:53.277 [http-nio-8088-exec-7] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.registerUser() with response: AuthResponse{token=****, message='User registered successfully! Please check your email for verification.', email='user3@example.com', role='PATIENT', id=3, username='user3'}
2025-05-06 07:37:58.793 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:38:36.061 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/register
2025-05-06 07:38:36.071 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/register
2025-05-06 07:38:36.071 [http-nio-8088-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:38:36.071 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/register
2025-05-06 07:38:36.073 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.registerUser() with arguments: [RegisterRequest{username='user4', email='user4@example.com', password=****, role=PATIENT, specialization='null', phone='null'}]
2025-05-06 07:38:36.074 [http-nio-8088-exec-9] DEBUG c.e.a.aop.LoggingAspect - ⏳ [AUTH-SERVICE] Starting: UserService.registerUser()
2025-05-06 07:38:36.076 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-05-06 07:38:36.079 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-05-06 07:38:36.160 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (email, email_verified, password, role, username, verification_token) 
    values
        (?, ?, ?, ?, ?, ?)
2025-05-06 07:38:36.160 [http-nio-8088-exec-9] DEBUG c.e.a.aop.LoggingAspect - ⏱️ [AUTH-SERVICE] Completed: UserService.registerUser() in 86 ms | Result: User{id=4, username='user4', email='user4@example.com', role=PATIENT, emailVerified=false}
2025-05-06 07:38:36.160 [http-nio-8088-exec-9] INFO  c.e.a.controller.AuthController - Registration successful for user: user4@example.com
2025-05-06 07:38:36.160 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.registerUser() with response: AuthResponse{token=****, message='User registered successfully! Please check your email for verification.', email='user4@example.com', role='PATIENT', id=4, username='user4'}
2025-05-06 07:39:03.399 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/auth/verify?token=2e948380-8a33-4d9a-80b0-c2b581629811
2025-05-06 07:39:03.399 [http-nio-8088-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:39:03.399 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/auth/verify?token=2e948380-8a33-4d9a-80b0-c2b581629811
2025-05-06 07:39:03.415 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.verifyEmail() with arguments: [2e948380-8a33-4d9a-80b0-c2b581629811]
2025-05-06 07:39:03.415 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.verification_token=?
2025-05-06 07:39:04.038 [http-nio-8088-exec-2] INFO  c.e.a.controller.AuthController - Patient record created in patient-service for: user1@example.com
2025-05-06 07:39:04.038 [http-nio-8088-exec-2] INFO  c.e.a.controller.AuthController - Email verified successfully for user: user1@example.com
2025-05-06 07:39:04.038 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.verifyEmail() with response: Email verified successfully!
2025-05-06 07:39:04.054 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        email_verified=?,
        password=?,
        role=?,
        username=?,
        verification_token=? 
    where
        id=?
2025-05-06 07:39:15.882 [http-nio-8088-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/auth/verify?token=5b5608f5-e81a-4bc5-9fae-058787848a07
2025-05-06 07:39:15.882 [http-nio-8088-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:39:15.882 [http-nio-8088-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/auth/verify?token=5b5608f5-e81a-4bc5-9fae-058787848a07
2025-05-06 07:39:15.882 [http-nio-8088-exec-3] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.verifyEmail() with arguments: [5b5608f5-e81a-4bc5-9fae-058787848a07]
2025-05-06 07:39:15.898 [http-nio-8088-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.verification_token=?
2025-05-06 07:39:15.975 [http-nio-8088-exec-3] INFO  c.e.a.controller.AuthController - Patient record created in patient-service for: user2@example.com
2025-05-06 07:39:15.975 [http-nio-8088-exec-3] INFO  c.e.a.controller.AuthController - Email verified successfully for user: user2@example.com
2025-05-06 07:39:15.975 [http-nio-8088-exec-3] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.verifyEmail() with response: Email verified successfully!
2025-05-06 07:39:15.991 [http-nio-8088-exec-3] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        email_verified=?,
        password=?,
        role=?,
        username=?,
        verification_token=? 
    where
        id=?
2025-05-06 07:39:26.266 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/auth/verify?token=84e23180-2904-4986-8a3b-507e39cdec46
2025-05-06 07:39:26.266 [http-nio-8088-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:39:26.266 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/auth/verify?token=84e23180-2904-4986-8a3b-507e39cdec46
2025-05-06 07:39:26.266 [http-nio-8088-exec-6] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.verifyEmail() with arguments: [84e23180-2904-4986-8a3b-507e39cdec46]
2025-05-06 07:39:26.266 [http-nio-8088-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.verification_token=?
2025-05-06 07:39:26.297 [http-nio-8088-exec-6] INFO  c.e.a.controller.AuthController - Patient record created in patient-service for: user3@example.com
2025-05-06 07:39:26.297 [http-nio-8088-exec-6] INFO  c.e.a.controller.AuthController - Email verified successfully for user: user3@example.com
2025-05-06 07:39:26.297 [http-nio-8088-exec-6] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.verifyEmail() with response: Email verified successfully!
2025-05-06 07:39:26.297 [http-nio-8088-exec-6] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        email_verified=?,
        password=?,
        role=?,
        username=?,
        verification_token=? 
    where
        id=?
2025-05-06 07:39:38.255 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/auth/verify?token=11a4a00f-ace6-46ca-8ab9-88a1af6667b8
2025-05-06 07:39:38.255 [http-nio-8088-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:39:38.255 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/auth/verify?token=11a4a00f-ace6-46ca-8ab9-88a1af6667b8
2025-05-06 07:39:38.255 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.verifyEmail() with arguments: [11a4a00f-ace6-46ca-8ab9-88a1af6667b8]
2025-05-06 07:39:38.262 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.verification_token=?
2025-05-06 07:39:38.283 [http-nio-8088-exec-5] INFO  c.e.a.controller.AuthController - Patient record created in patient-service for: user4@example.com
2025-05-06 07:39:38.283 [http-nio-8088-exec-5] INFO  c.e.a.controller.AuthController - Email verified successfully for user: user4@example.com
2025-05-06 07:39:38.289 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.verifyEmail() with response: Email verified successfully!
2025-05-06 07:39:38.290 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        email_verified=?,
        password=?,
        role=?,
        username=?,
        verification_token=? 
    where
        id=?
2025-05-06 07:41:30.991 [http-nio-8088-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/register
2025-05-06 07:41:30.995 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/register
2025-05-06 07:41:30.996 [http-nio-8088-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:41:30.996 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/register
2025-05-06 07:41:30.998 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.registerUser() with arguments: [RegisterRequest{username='drkhan', email='drkhan@example.com', password=****, role=DOCTOR, specialization='Dermatologist', phone='8978654678'}]
2025-05-06 07:41:30.998 [http-nio-8088-exec-8] DEBUG c.e.a.aop.LoggingAspect - ⏳ [AUTH-SERVICE] Starting: UserService.registerUser()
2025-05-06 07:41:30.999 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-05-06 07:41:31.001 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-05-06 07:41:31.078 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (email, email_verified, password, role, username, verification_token) 
    values
        (?, ?, ?, ?, ?, ?)
2025-05-06 07:41:31.469 [http-nio-8088-exec-8] DEBUG c.e.a.aop.LoggingAspect - ⏱️ [AUTH-SERVICE] Completed: UserService.registerUser() in 471 ms | Result: User{id=5, username='drkhan', email='drkhan@example.com', role=DOCTOR, emailVerified=false}
2025-05-06 07:41:31.469 [http-nio-8088-exec-8] INFO  c.e.a.controller.AuthController - Registration successful for user: drkhan@example.com
2025-05-06 07:41:31.469 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.registerUser() with response: AuthResponse{token=****, message='User registered successfully! Please check your email for verification.', email='drkhan@example.com', role='DOCTOR', id=5, username='drkhan'}
2025-05-06 07:42:24.052 [http-nio-8088-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/register
2025-05-06 07:42:24.056 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/register
2025-05-06 07:42:24.057 [http-nio-8088-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:42:24.058 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/register
2025-05-06 07:42:24.060 [http-nio-8088-exec-1] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.registerUser() with arguments: [RegisterRequest{username='drsharma', email='drsharma@example.com', password=****, role=DOCTOR, specialization='Cardiologist', phone='8769876547'}]
2025-05-06 07:42:24.061 [http-nio-8088-exec-1] DEBUG c.e.a.aop.LoggingAspect - ⏳ [AUTH-SERVICE] Starting: UserService.registerUser()
2025-05-06 07:42:24.062 [http-nio-8088-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-05-06 07:42:24.064 [http-nio-8088-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-05-06 07:42:24.147 [http-nio-8088-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (email, email_verified, password, role, username, verification_token) 
    values
        (?, ?, ?, ?, ?, ?)
2025-05-06 07:42:24.163 [http-nio-8088-exec-1] DEBUG c.e.a.aop.LoggingAspect - ⏱️ [AUTH-SERVICE] Completed: UserService.registerUser() in 102 ms | Result: User{id=6, username='drsharma', email='drsharma@example.com', role=DOCTOR, emailVerified=false}
2025-05-06 07:42:24.163 [http-nio-8088-exec-1] INFO  c.e.a.controller.AuthController - Registration successful for user: drsharma@example.com
2025-05-06 07:42:24.163 [http-nio-8088-exec-1] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.registerUser() with response: AuthResponse{token=****, message='User registered successfully! Please check your email for verification.', email='drsharma@example.com', role='DOCTOR', id=6, username='drsharma'}
2025-05-06 07:42:58.803 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:43:19.001 [http-nio-8088-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/register
2025-05-06 07:43:19.005 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/register
2025-05-06 07:43:19.006 [http-nio-8088-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:43:19.007 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/register
2025-05-06 07:43:19.008 [http-nio-8088-exec-6] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.registerUser() with arguments: [RegisterRequest{username='drverma', email='drverma@example.com', password=****, role=DOCTOR, specialization='Neurologist', phone='8976890765'}]
2025-05-06 07:43:19.008 [http-nio-8088-exec-6] DEBUG c.e.a.aop.LoggingAspect - ⏳ [AUTH-SERVICE] Starting: UserService.registerUser()
2025-05-06 07:43:19.009 [http-nio-8088-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-05-06 07:43:19.011 [http-nio-8088-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-05-06 07:43:19.099 [http-nio-8088-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (email, email_verified, password, role, username, verification_token) 
    values
        (?, ?, ?, ?, ?, ?)
2025-05-06 07:43:19.117 [http-nio-8088-exec-6] DEBUG c.e.a.aop.LoggingAspect - ⏱️ [AUTH-SERVICE] Completed: UserService.registerUser() in 108 ms | Result: User{id=7, username='drverma', email='drverma@example.com', role=DOCTOR, emailVerified=false}
2025-05-06 07:43:19.117 [http-nio-8088-exec-6] INFO  c.e.a.controller.AuthController - Registration successful for user: drverma@example.com
2025-05-06 07:43:19.117 [http-nio-8088-exec-6] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.registerUser() with response: AuthResponse{token=****, message='User registered successfully! Please check your email for verification.', email='drverma@example.com', role='DOCTOR', id=7, username='drverma'}
2025-05-06 07:44:37.188 [http-nio-8088-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/register
2025-05-06 07:44:37.193 [http-nio-8088-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/register
2025-05-06 07:44:37.194 [http-nio-8088-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:44:37.194 [http-nio-8088-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/register
2025-05-06 07:44:37.196 [http-nio-8088-exec-7] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.registerUser() with arguments: [RegisterRequest{username='drsmith', email='drsmith@example.com', password=****, role=DOCTOR, specialization='Orthopedic Surgeon', phone='9878657865'}]
2025-05-06 07:44:37.196 [http-nio-8088-exec-7] DEBUG c.e.a.aop.LoggingAspect - ⏳ [AUTH-SERVICE] Starting: UserService.registerUser()
2025-05-06 07:44:37.197 [http-nio-8088-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-05-06 07:44:37.199 [http-nio-8088-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-05-06 07:44:37.268 [http-nio-8088-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (email, email_verified, password, role, username, verification_token) 
    values
        (?, ?, ?, ?, ?, ?)
2025-05-06 07:44:37.300 [http-nio-8088-exec-7] DEBUG c.e.a.aop.LoggingAspect - ⏱️ [AUTH-SERVICE] Completed: UserService.registerUser() in 104 ms | Result: User{id=8, username='drsmith', email='drsmith@example.com', role=DOCTOR, emailVerified=false}
2025-05-06 07:44:37.300 [http-nio-8088-exec-7] INFO  c.e.a.controller.AuthController - Registration successful for user: drsmith@example.com
2025-05-06 07:44:37.300 [http-nio-8088-exec-7] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.registerUser() with response: AuthResponse{token=****, message='User registered successfully! Please check your email for verification.', email='drsmith@example.com', role='DOCTOR', id=8, username='drsmith'}
2025-05-06 07:45:31.297 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/register
2025-05-06 07:45:31.299 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/register
2025-05-06 07:45:31.301 [http-nio-8088-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:45:31.302 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/register
2025-05-06 07:45:31.304 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.registerUser() with arguments: [RegisterRequest{username='hospitaloperator1', email='hospitaloperator1@example.com', password=****, role=HOSPITALOPERATOR, specialization='null', phone='9898760123'}]
2025-05-06 07:45:31.304 [http-nio-8088-exec-9] DEBUG c.e.a.aop.LoggingAspect - ⏳ [AUTH-SERVICE] Starting: UserService.registerUser()
2025-05-06 07:45:31.305 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-05-06 07:45:31.308 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-05-06 07:45:31.385 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (email, email_verified, password, role, username, verification_token) 
    values
        (?, ?, ?, ?, ?, ?)
2025-05-06 07:45:31.385 [http-nio-8088-exec-9] DEBUG c.e.a.aop.LoggingAspect - ⏱️ [AUTH-SERVICE] Completed: UserService.registerUser() in 81 ms | Result: User{id=9, username='hospitaloperator1', email='hospitaloperator1@example.com', role=HOSPITALOPERATOR, emailVerified=false}
2025-05-06 07:45:31.385 [http-nio-8088-exec-9] INFO  c.e.a.controller.AuthController - Registration successful for user: hospitaloperator1@example.com
2025-05-06 07:45:31.385 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.registerUser() with response: AuthResponse{token=****, message='User registered successfully! Please check your email for verification.', email='hospitaloperator1@example.com', role='HOSPITALOPERATOR', id=9, username='hospitaloperator1'}
2025-05-06 07:45:47.962 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/auth/verify?token=4d696d71-79c3-460d-b9a4-8a213ccd23bf
2025-05-06 07:45:47.962 [http-nio-8088-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:45:47.962 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/auth/verify?token=4d696d71-79c3-460d-b9a4-8a213ccd23bf
2025-05-06 07:45:47.962 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.verifyEmail() with arguments: [4d696d71-79c3-460d-b9a4-8a213ccd23bf]
2025-05-06 07:45:47.962 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.verification_token=?
2025-05-06 07:45:47.977 [http-nio-8088-exec-2] INFO  c.e.a.controller.AuthController - Email verified successfully for user: drkhan@example.com
2025-05-06 07:45:47.977 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.verifyEmail() with response: Email verified successfully!
2025-05-06 07:45:47.977 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        email_verified=?,
        password=?,
        role=?,
        username=?,
        verification_token=? 
    where
        id=?
2025-05-06 07:45:57.692 [http-nio-8088-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/auth/verify?token=4d696d71-79c3-460d-b9a4-8a213ccd23bf
2025-05-06 07:45:57.692 [http-nio-8088-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:45:57.694 [http-nio-8088-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/auth/verify?token=4d696d71-79c3-460d-b9a4-8a213ccd23bf
2025-05-06 07:45:57.697 [http-nio-8088-exec-3] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.verifyEmail() with arguments: [4d696d71-79c3-460d-b9a4-8a213ccd23bf]
2025-05-06 07:45:57.697 [http-nio-8088-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.verification_token=?
2025-05-06 07:45:57.886 [http-nio-8088-exec-3] WARN  c.e.a.controller.AuthController - Invalid or expired email verification token: 4d696d71-79c3-460d-b9a4-8a213ccd23bf
2025-05-06 07:45:57.886 [http-nio-8088-exec-3] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.verifyEmail() with response: Invalid or expired token.
2025-05-06 07:46:20.405 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/auth/verify?token=3dbab027-51c1-4708-8d9a-01ea33872d38
2025-05-06 07:46:20.405 [http-nio-8088-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:46:20.405 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/auth/verify?token=3dbab027-51c1-4708-8d9a-01ea33872d38
2025-05-06 07:46:20.405 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.verifyEmail() with arguments: [3dbab027-51c1-4708-8d9a-01ea33872d38]
2025-05-06 07:46:20.405 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.verification_token=?
2025-05-06 07:46:20.421 [http-nio-8088-exec-5] INFO  c.e.a.controller.AuthController - Email verified successfully for user: drsharma@example.com
2025-05-06 07:46:20.421 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.verifyEmail() with response: Email verified successfully!
2025-05-06 07:46:20.421 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        email_verified=?,
        password=?,
        role=?,
        username=?,
        verification_token=? 
    where
        id=?
2025-05-06 07:46:36.061 [http-nio-8088-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/auth/verify?token=7331ad5b-5157-4db9-98d0-71f75efa2088
2025-05-06 07:46:36.061 [http-nio-8088-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:46:36.061 [http-nio-8088-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/auth/verify?token=7331ad5b-5157-4db9-98d0-71f75efa2088
2025-05-06 07:46:36.061 [http-nio-8088-exec-4] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.verifyEmail() with arguments: [7331ad5b-5157-4db9-98d0-71f75efa2088]
2025-05-06 07:46:36.061 [http-nio-8088-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.verification_token=?
2025-05-06 07:46:36.076 [http-nio-8088-exec-4] INFO  c.e.a.controller.AuthController - Email verified successfully for user: drverma@example.com
2025-05-06 07:46:36.076 [http-nio-8088-exec-4] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.verifyEmail() with response: Email verified successfully!
2025-05-06 07:46:36.076 [http-nio-8088-exec-4] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        email_verified=?,
        password=?,
        role=?,
        username=?,
        verification_token=? 
    where
        id=?
2025-05-06 07:46:48.132 [http-nio-8088-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/auth/verify?token=a5aebb01-cceb-4ff7-85b6-64010ede1f3b
2025-05-06 07:46:48.132 [http-nio-8088-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:46:48.132 [http-nio-8088-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/auth/verify?token=a5aebb01-cceb-4ff7-85b6-64010ede1f3b
2025-05-06 07:46:48.132 [http-nio-8088-exec-7] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.verifyEmail() with arguments: [a5aebb01-cceb-4ff7-85b6-64010ede1f3b]
2025-05-06 07:46:48.132 [http-nio-8088-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.verification_token=?
2025-05-06 07:46:48.132 [http-nio-8088-exec-7] INFO  c.e.a.controller.AuthController - Email verified successfully for user: drsmith@example.com
2025-05-06 07:46:48.132 [http-nio-8088-exec-7] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.verifyEmail() with response: Email verified successfully!
2025-05-06 07:46:48.147 [http-nio-8088-exec-7] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        email_verified=?,
        password=?,
        role=?,
        username=?,
        verification_token=? 
    where
        id=?
2025-05-06 07:46:59.199 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/auth/verify?token=162f19c3-b3b5-42bb-8e2d-d7133ec7485d
2025-05-06 07:46:59.199 [http-nio-8088-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:46:59.199 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/auth/verify?token=162f19c3-b3b5-42bb-8e2d-d7133ec7485d
2025-05-06 07:46:59.199 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.verifyEmail() with arguments: [162f19c3-b3b5-42bb-8e2d-d7133ec7485d]
2025-05-06 07:46:59.199 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.verification_token=?
2025-05-06 07:46:59.215 [http-nio-8088-exec-8] INFO  c.e.a.controller.AuthController - Email verified successfully for user: hospitaloperator1@example.com
2025-05-06 07:46:59.215 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.verifyEmail() with response: Email verified successfully!
2025-05-06 07:46:59.215 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        email_verified=?,
        password=?,
        role=?,
        username=?,
        verification_token=? 
    where
        id=?
2025-05-06 07:47:09.115 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:47:09.115 [http-nio-8088-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:47:09.121 [http-nio-8088-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:47:09.122 [http-nio-8088-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:47:09.125 [http-nio-8088-exec-10] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='user1', password=****]
2025-05-06 07:47:09.135 [http-nio-8088-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:47:09.213 [http-nio-8088-exec-10] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:47:09.213 [http-nio-8088-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:47:09.229 [http-nio-8088-exec-10] INFO  c.e.a.controller.AuthController - Login successful for user: user1
2025-05-06 07:47:09.229 [http-nio-8088-exec-10] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='user1@example.com', role='PATIENT', id=1, username='user1'}
2025-05-06 07:47:17.933 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:47:17.939 [http-nio-8088-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:47:17.940 [http-nio-8088-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:47:17.940 [http-nio-8088-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:47:17.944 [http-nio-8088-exec-3] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='user2', password=****]
2025-05-06 07:47:17.948 [http-nio-8088-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:47:18.034 [http-nio-8088-exec-3] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:47:18.034 [http-nio-8088-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:47:18.034 [http-nio-8088-exec-3] INFO  c.e.a.controller.AuthController - Login successful for user: user2
2025-05-06 07:47:18.034 [http-nio-8088-exec-3] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='user2@example.com', role='PATIENT', id=2, username='user2'}
2025-05-06 07:47:24.762 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:47:24.767 [http-nio-8088-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:47:24.768 [http-nio-8088-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:47:24.768 [http-nio-8088-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:47:24.770 [http-nio-8088-exec-4] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='user3', password=****]
2025-05-06 07:47:24.771 [http-nio-8088-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:47:24.870 [http-nio-8088-exec-4] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:47:24.870 [http-nio-8088-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:47:24.876 [http-nio-8088-exec-4] INFO  c.e.a.controller.AuthController - Login successful for user: user3
2025-05-06 07:47:24.876 [http-nio-8088-exec-4] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='user3@example.com', role='PATIENT', id=3, username='user3'}
2025-05-06 07:47:32.220 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:47:32.224 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:47:32.224 [http-nio-8088-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:47:32.224 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:47:32.224 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='user4', password=****]
2025-05-06 07:47:32.224 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:47:32.333 [http-nio-8088-exec-9] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:47:32.333 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:47:32.333 [http-nio-8088-exec-9] INFO  c.e.a.controller.AuthController - Login successful for user: user4
2025-05-06 07:47:32.333 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='user4@example.com', role='PATIENT', id=4, username='user4'}
2025-05-06 07:47:43.406 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:47:43.413 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:47:43.413 [http-nio-8088-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:47:43.414 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:47:43.416 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drkhan', password=****]
2025-05-06 07:47:43.416 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:47:43.494 [http-nio-8088-exec-2] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:47:43.494 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:47:43.494 [http-nio-8088-exec-2] INFO  c.e.a.controller.AuthController - Login successful for user: drkhan
2025-05-06 07:47:43.494 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='drkhan@example.com', role='DOCTOR', id=5, username='drkhan'}
2025-05-06 07:47:49.219 [http-nio-8088-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:47:49.220 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:47:49.220 [http-nio-8088-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:47:49.220 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:47:49.220 [http-nio-8088-exec-6] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drkhan', password=****]
2025-05-06 07:47:49.220 [http-nio-8088-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:47:49.376 [http-nio-8088-exec-6] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:47:49.376 [http-nio-8088-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:47:49.392 [http-nio-8088-exec-6] INFO  c.e.a.controller.AuthController - Login successful for user: drkhan
2025-05-06 07:47:49.392 [http-nio-8088-exec-6] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='drkhan@example.com', role='DOCTOR', id=5, username='drkhan'}
2025-05-06 07:47:58.806 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:48:02.136 [http-nio-8088-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:48:02.139 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:48:02.141 [http-nio-8088-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:48:02.141 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:48:02.143 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drverma', password=****]
2025-05-06 07:48:02.143 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:48:02.223 [http-nio-8088-exec-8] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Failed to authenticate since password does not match stored value
2025-05-06 07:48:02.270 [http-nio-8088-exec-8] WARN  c.e.a.controller.AuthController - Invalid login attempt: Bad credentials
2025-05-06 07:48:02.270 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: Invalid username/email or password
2025-05-06 07:48:06.185 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:48:06.185 [http-nio-8088-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:48:06.185 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:48:06.190 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drverma', password=****]
2025-05-06 07:48:06.190 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:48:06.273 [http-nio-8088-exec-9] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Failed to authenticate since password does not match stored value
2025-05-06 07:48:06.273 [http-nio-8088-exec-9] WARN  c.e.a.controller.AuthController - Invalid login attempt: Bad credentials
2025-05-06 07:48:06.273 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: Invalid username/email or password
2025-05-06 07:52:50.518 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:52:50.522 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:52:50.523 [http-nio-8088-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:52:50.524 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:52:50.526 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drverma', password=****]
2025-05-06 07:52:50.527 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:52:50.610 [http-nio-8088-exec-2] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Failed to authenticate since password does not match stored value
2025-05-06 07:52:50.610 [http-nio-8088-exec-2] WARN  c.e.a.controller.AuthController - Invalid login attempt: Bad credentials
2025-05-06 07:52:50.610 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: Invalid username/email or password
2025-05-06 07:52:57.747 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:52:57.757 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:52:57.758 [http-nio-8088-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:52:57.758 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:52:57.760 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drkhan', password=****]
2025-05-06 07:52:57.762 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:52:57.845 [http-nio-8088-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:52:57.845 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:52:57.845 [http-nio-8088-exec-5] INFO  c.e.a.controller.AuthController - Login successful for user: drkhan
2025-05-06 07:52:57.845 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='drkhan@example.com', role='DOCTOR', id=5, username='drkhan'}
2025-05-06 07:52:58.810 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:53:22.851 [http-nio-8088-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:53:22.857 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:53:22.858 [http-nio-8088-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:53:22.858 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:53:22.860 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drverma', password=****]
2025-05-06 07:53:22.861 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:53:22.946 [http-nio-8088-exec-8] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:53:22.946 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:53:22.946 [http-nio-8088-exec-8] INFO  c.e.a.controller.AuthController - Login successful for user: drverma
2025-05-06 07:53:22.946 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='drverma@example.com', role='DOCTOR', id=7, username='drverma'}
2025-05-06 07:53:25.978 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:53:25.979 [http-nio-8088-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:53:25.981 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:53:25.983 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drverma', password=****]
2025-05-06 07:53:25.984 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:53:26.054 [http-nio-8088-exec-9] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:53:26.062 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:53:26.062 [http-nio-8088-exec-9] INFO  c.e.a.controller.AuthController - Login successful for user: drverma
2025-05-06 07:53:26.062 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='drverma@example.com', role='DOCTOR', id=7, username='drverma'}
2025-05-06 07:53:39.419 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:53:39.422 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:53:39.424 [http-nio-8088-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:53:39.424 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:53:39.425 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drkhan', password=****]
2025-05-06 07:53:39.426 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:53:39.491 [http-nio-8088-exec-2] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:53:39.491 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:53:39.491 [http-nio-8088-exec-2] INFO  c.e.a.controller.AuthController - Login successful for user: drkhan
2025-05-06 07:53:39.491 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='drkhan@example.com', role='DOCTOR', id=5, username='drkhan'}
2025-05-06 07:53:41.638 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:53:41.638 [http-nio-8088-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:53:41.644 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:53:41.645 [http-nio-8088-exec-6] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drkhan', password=****]
2025-05-06 07:53:41.645 [http-nio-8088-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:53:41.721 [http-nio-8088-exec-6] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:53:41.721 [http-nio-8088-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:53:41.721 [http-nio-8088-exec-6] INFO  c.e.a.controller.AuthController - Login successful for user: drkhan
2025-05-06 07:53:41.721 [http-nio-8088-exec-6] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='drkhan@example.com', role='DOCTOR', id=5, username='drkhan'}
2025-05-06 07:53:52.490 [http-nio-8088-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:53:52.494 [http-nio-8088-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:53:52.495 [http-nio-8088-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:53:52.495 [http-nio-8088-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:53:52.497 [http-nio-8088-exec-7] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drsharma', password=****]
2025-05-06 07:53:52.497 [http-nio-8088-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:53:52.568 [http-nio-8088-exec-7] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:53:52.568 [http-nio-8088-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:53:52.568 [http-nio-8088-exec-7] INFO  c.e.a.controller.AuthController - Login successful for user: drsharma
2025-05-06 07:53:52.568 [http-nio-8088-exec-7] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='drsharma@example.com', role='DOCTOR', id=6, username='drsharma'}
2025-05-06 07:54:02.569 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:54:02.573 [http-nio-8088-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:54:02.574 [http-nio-8088-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:54:02.574 [http-nio-8088-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:54:02.576 [http-nio-8088-exec-10] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drsmith', password=****]
2025-05-06 07:54:02.576 [http-nio-8088-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:54:02.647 [http-nio-8088-exec-10] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:54:02.647 [http-nio-8088-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:54:02.647 [http-nio-8088-exec-10] INFO  c.e.a.controller.AuthController - Login successful for user: drsmith
2025-05-06 07:54:02.647 [http-nio-8088-exec-10] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='drsmith@example.com', role='DOCTOR', id=8, username='drsmith'}
2025-05-06 07:54:21.484 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:54:21.486 [http-nio-8088-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:54:21.487 [http-nio-8088-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:54:21.487 [http-nio-8088-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:54:21.488 [http-nio-8088-exec-3] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='hospitaloperator1', password=****]
2025-05-06 07:54:21.489 [http-nio-8088-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:54:21.556 [http-nio-8088-exec-3] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:54:21.556 [http-nio-8088-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:54:21.556 [http-nio-8088-exec-3] INFO  c.e.a.controller.AuthController - Login successful for user: hospitaloperator1
2025-05-06 07:54:21.556 [http-nio-8088-exec-3] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='hospitaloperator1@example.com', role='HOSPITALOPERATOR', id=9, username='hospitaloperator1'}
2025-05-06 07:55:30.991 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:55:30.995 [http-nio-8088-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:55:30.996 [http-nio-8088-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:55:30.996 [http-nio-8088-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:55:30.998 [http-nio-8088-exec-4] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='user1', password=****]
2025-05-06 07:55:30.998 [http-nio-8088-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:55:31.075 [http-nio-8088-exec-4] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:55:31.075 [http-nio-8088-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:55:31.075 [http-nio-8088-exec-4] INFO  c.e.a.controller.AuthController - Login successful for user: user1
2025-05-06 07:55:31.075 [http-nio-8088-exec-4] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='user1@example.com', role='PATIENT', id=1, username='user1'}
2025-05-06 07:55:40.721 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:55:40.724 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:55:40.725 [http-nio-8088-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:55:40.725 [http-nio-8088-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:55:40.727 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='user2', password=****]
2025-05-06 07:55:40.727 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:55:40.792 [http-nio-8088-exec-9] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:55:40.792 [http-nio-8088-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:55:40.792 [http-nio-8088-exec-9] INFO  c.e.a.controller.AuthController - Login successful for user: user2
2025-05-06 07:55:40.792 [http-nio-8088-exec-9] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='user2@example.com', role='PATIENT', id=2, username='user2'}
2025-05-06 07:56:33.671 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:56:33.674 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:56:33.675 [http-nio-8088-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:56:33.676 [http-nio-8088-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:56:33.678 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='drsharma', password=****]
2025-05-06 07:56:33.678 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:56:33.754 [http-nio-8088-exec-2] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:56:33.755 [http-nio-8088-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:56:33.757 [http-nio-8088-exec-2] INFO  c.e.a.controller.AuthController - Login successful for user: drsharma
2025-05-06 07:56:33.757 [http-nio-8088-exec-2] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='drsharma@example.com', role='DOCTOR', id=6, username='drsharma'}
2025-05-06 07:56:48.031 [http-nio-8088-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:56:48.034 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:56:48.035 [http-nio-8088-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:56:48.036 [http-nio-8088-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:56:48.037 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='hospitaloperator1', password=****]
2025-05-06 07:56:48.038 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:56:48.113 [http-nio-8088-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:56:48.114 [http-nio-8088-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:56:48.116 [http-nio-8088-exec-5] INFO  c.e.a.controller.AuthController - Login successful for user: hospitaloperator1
2025-05-06 07:56:48.117 [http-nio-8088-exec-5] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='hospitaloperator1@example.com', role='HOSPITALOPERATOR', id=9, username='hospitaloperator1'}
2025-05-06 07:57:58.824 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 07:58:51.998 [http-nio-8088-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:58:52.003 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:58:52.003 [http-nio-8088-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:58:52.004 [http-nio-8088-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:58:52.006 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='user2', password=****]
2025-05-06 07:58:52.008 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:58:52.085 [http-nio-8088-exec-8] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:58:52.085 [http-nio-8088-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:58:52.085 [http-nio-8088-exec-8] INFO  c.e.a.controller.AuthController - Login successful for user: user2
2025-05-06 07:58:52.085 [http-nio-8088-exec-8] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='user2@example.com', role='PATIENT', id=2, username='user2'}
2025-05-06 07:59:50.250 [http-nio-8088-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-05-06 07:59:50.254 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-05-06 07:59:50.255 [http-nio-8088-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-05-06 07:59:50.255 [http-nio-8088-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-05-06 07:59:50.257 [http-nio-8088-exec-1] INFO  c.e.a.aop.LoggingAspect - ▶️ [AUTH-CONTROLLER] Entering: AuthController.loginUser() with arguments: [AuthRequest{username='user2', password=****]
2025-05-06 07:59:50.258 [http-nio-8088-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:59:50.321 [http-nio-8088-exec-1] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-05-06 07:59:50.321 [http-nio-8088-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.email_verified,
        u1_0.password,
        u1_0.role,
        u1_0.username,
        u1_0.verification_token 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-05-06 07:59:50.337 [http-nio-8088-exec-1] INFO  c.e.a.controller.AuthController - Login successful for user: user2
2025-05-06 07:59:50.337 [http-nio-8088-exec-1] INFO  c.e.a.aop.LoggingAspect - ✅ [AUTH-CONTROLLER] Exiting: AuthController.loginUser() with response: AuthResponse{token=****, message='Login successful', email='user2@example.com', role='PATIENT', id=2, username='user2'}
2025-05-06 08:02:58.834 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-06 08:07:58.835 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
